#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>
#include <Wire.h>
#ifdef MODEL_3
//#include <INA226_WE.h>  // for MODEL_3
#endif
#include "global.h"
#include "ota_ap.h"
#include "buttons_and_modes.h"
#include <EEPROM.h>

#include <soc/rtc.h>
#include <esp_system.h>

#include <FS.h>        // File System for Web Server Files
#include <LittleFS.h>  // This file system is used.

const char *serverIndex =
  "<form method='POST' action='/update' enctype='multipart/form-data'><input type='file' name='update'><input type='submit' value='Update'></form>";

#ifdef MODEL_3
#define I2C_ADDRESS 0x40  // for MODEL_3
//INA226_WE ina226 = INA226_WE(I2C_ADDRESS);  // for MODEL_3
#endif

BLECharacteristic* command_charc;
BLECharacteristic* motor_state_charc;

BLEServer* ble_server;
bool run_permit = false;
uint8_t prev_motor_state = 0;
String command = "";
unsigned long last_keep_time = 0;
unsigned long time_bet_keep = 0;
unsigned long start_con_time = 0;
unsigned long cur_con_interval = 0;
unsigned long max_con_interval = 30000;
uint16_t conn_id;
bool client_connected = false;
int session_id = 0;
bool session_pause = false;
unsigned long max_pause_time = 60000;
unsigned long start_pause_time = 0;
int eeprom_addres = 0;
float current_mA = 0.0;

unsigned long lastSecond = 0;
unsigned long lastMillisecond = 0;
unsigned long maxCycle = 0;
unsigned long cycle = 0;
unsigned long mA = 0;
unsigned long mAmA = 0;
unsigned long needPress = 0;
unsigned long zero = 0;
unsigned long one = 0;
unsigned long two = 0;
unsigned long three = 0;

long bootCount = 0;
bool needRestart = 0;

WebServer myServer(88);

uint8_t IsMotorRun();

class ServerCallbacks : public BLEServerCallbacks 
{
  void onConnect(BLEServer* server, esp_ble_gatts_cb_param_t *param)
  {
    start_con_time = millis();
    conn_id = server->getConnId();
    client_connected = true;
    EEPROM.write(eeprom_addres, conn_id);
    eeprom_addres++;
    if (eeprom_addres > 32) eeprom_addres = 0;
  }
  void onDisconnect(BLEServer* server)
  {
    client_connected = false;
    BLEDevice::startAdvertising();
  }
};
int get_session_id(string message)
{
  size_t delimiter_index = message.find_last_of(' ');
  if (delimiter_index != string::npos)
    return stoi(message.substr((int)delimiter_index + 1, message.length()));
  else return 0;
}
class RestProcessCallbacks : public BLECharacteristicCallbacks 
{
  void onWrite(BLECharacteristic *charc)
  {
    string message = charc->getValue().c_str();
    int _session_id = get_session_id(message);
    size_t delimiter_index = message.find(' ');
    size_t last_delimiter = message.find_last_of(' ');
    string command = (delimiter_index > 0) ? message.substr(0, delimiter_index) : message;
    if (session_id == 0 || session_id == _session_id)
    {
      if (command == "RUN") {
        if (delimiter_index > 0 && delimiter_index != string::npos && last_delimiter != string::npos) {
          if ((0 == run_permit) & (0 == needPress) & !IsMotorRun()) needPress = 1;
          run_permit = true;
          const size_t length = delimiter_index == last_delimiter ? string::npos : last_delimiter - delimiter_index - 1;
          time_bet_keep = (unsigned long)(stoi(message.substr(delimiter_index + 1, length)) * 1000);
          last_keep_time = millis(); 
          session_id = _session_id;
          digitalWrite(BoardLedPin, HIGH);
          command_charc->setValue("0");
        } else {command_charc->setValue("1");}
        command = "";
      }
      else if (command == "STOP") {
        if ((1 == run_permit) & (0 == needPress) & IsMotorRun()) needPress = 1;
        run_permit = false;
        session_id = 0;
        digitalWrite(BoardLedPin, LOW);
        command_charc->setValue("0");
        command = "";
      } 
      else if (command == "KEEPALIVE") {
        last_keep_time = millis();
        command_charc->setValue("0");
      } else if (command == "STATUS") {
               uint8_t session_state = run_permit ? 1 : 0;
               command_charc->setValue(String(session_state));
             }
      else if (command == "UPDATE") {
              WebServerInit();
              WebServerRun();
           } 
      else if (command == "PAUSE") {
        if(delimiter_index != string::npos && last_delimiter != string::npos) {
          const size_t length = delimiter_index == last_delimiter ? string::npos : last_delimiter - delimiter_index - 1;
          max_pause_time = (unsigned long)(stoi(message.substr(delimiter_index + 1, length)) * 1000);
          if (max_pause_time > 0) {
            if ((0 == session_pause) & (0 == needPress)) needPress = 1;            
            session_pause = true;
            start_pause_time = millis();
          }
          else { 
            if ((1 == session_pause) & (0 == needPress)) needPress = 1;
            last_keep_time = millis();
            session_pause = false;
          }          
          command_charc->setValue("0");
        }
        else {
          command_charc->setValue("1");
        }
        command = "";
      }
      else if (command == "LOGS")
      {
        String logs_str;
        for (int i = 0; i < 32; i++)
        {
          logs_str += String(EEPROM.read(i)) + String(" ");
        }
        command_charc->setValue(logs_str);
      }
      else command_charc->setValue("2");
    }
    else command_charc->setValue("1");
  }
};

void GPIO_Init()
{
  pinMode(BoardLedPin, OUTPUT);
  pinMode(MotorControlPin, INPUT_PULLUP);  // <<<  INPUT -> INPUT_PULLUP
  pinMode(PowerRelayPin, OUTPUT);
  digitalWrite(PowerRelayPin, HIGH);
}
void BLE_Init()
{
  Serial.begin(9600);
  BLEDevice::init("RestNow_BLE");
  //create server
  ble_server = BLEDevice::createServer();
  ble_server->setCallbacks(new ServerCallbacks());
  //create service
  BLEService *service = ble_server->createService(SERVICE_UUID);
  //create command characteristic
  command_charc = service->createCharacteristic(COMMAND_UUID, BLECharacteristic::PROPERTY_WRITE | BLECharacteristic::PROPERTY_READ);
  command_charc->setCallbacks(new RestProcessCallbacks());
  //create motor_state characteristic
  motor_state_charc = service->createCharacteristic(MOTOR_STATE_UUID, BLECharacteristic::PROPERTY_NOTIFY);
  motor_state_charc->addDescriptor(new BLE2902());
  // Start the service
  service->start();
  // Start advertising
  BLEAdvertising *advertising = BLEDevice::getAdvertising();
  advertising->addServiceUUID(ADVERTISING_UUID);
  advertising->setMinPreferred(0x12);
  advertising->start(); // Запуск реклами
  Serial.println("BLE Advertising started!");
}

void handleIndex() {
  myServer.sendHeader("Cache-Control", "no-cache");
  myServer.sendHeader("Refresh", "content=\"3\"");
  myServer.sendHeader("Cache-Control", "no-cache");
  String result = "";

  //result += "<!DOCTYPE HTML> \r\n";
  //result += "<html> <head> <title> &nbsp; </title> \r\n";
  //result += "<meta http-equiv=\"Refresh\" content=\"3\"> \r\n";
  //result += "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n";
  //result += "</head> \r\n";
  //result += "<body> \r\n";
  result += " <b> \"Chip Model\": " + String(ESP.getChipModel()) + ", </b> \r\n";
  result += "  \"Chip Cores\": " + String(ESP.getChipCores()) + ",\r\n";
  result += "  \"Chip Revision\": " + String(ESP.getChipRevision()) + ",\r\n";
  result += "  \"flashSize\": " + String(ESP.getFlashChipSize()) + ",\r\n";
  result += "  \"freeHeap\": " + String(ESP.getFreeHeap()) + ",\r\n";
  
  //result += "   " + ",\r\n"; // 
  //result += "  \"fsTotalBytes\": " + String(LittleFS.totalBytes()) + ",\n";
  //result += "  \"fsUsedBytes\": " + String(LittleFS.usedBytes()) + ",\n";
  //result += "</body> \r\n";
  //result += "</html> \r\n";

  //myServer.sendHeader("Cache-Control", "no-cache");
  myServer.send(200, "text/javascript; charset=utf-8", result);
}  // handleIndex()

void handleIn() {
  String result = "";
  result += " \"analogRead\": " + String(analogRead(4)) + ", \r\n";
  result += " \"mA\": " + String(mA) + ", \r\n";
  result += " \"mAmA\": " + String(mAmA) + ", \r\n";
  result += " \"needPress\": " + String(needPress) + ", \r\n";
  result += " \"millis()-needPress\": " + String(millis()-needPress) + ", \r\n";
  result += " \"millis()\": " + String(millis()) + ", \r\n";
  result += " \"IsMotorRun()\": " + String(IsMotorRun()) + ", \r\n";
  result += " \"run_permit\": " + String(run_permit) + ", \r\n";
  result += " \"zero\": " + String(zero) + ", \r\n";
  result += " \"one\": " + String(one) + ", \r\n";
  result += " \"two\": " + String(two) + ", \r\n";
  result += " \"three\": " + String(three) + ", \r\n";
  result += " \"maxCycle\": " + String(maxCycle) + ", \r\n";
  result += " \"bootCount\": " + String(bootCount) + ", \r\n";
  myServer.send(200, "text/javascript; charset=utf-8", result);
}  // handleIn()

void handleOn() {
  String result = "";
  result += " \"digitalRead\": " + String(digitalRead(3)) + ", \r\n";
  digitalWrite(3, !digitalRead(3));
  myServer.send(200, "text/javascript; charset=utf-8", result);
}  // handleOn()

void handle1() {
  String result = "";
  result += " 1 \r\n";
  myServer.send(200, "text/javascript; charset=utf-8", result);
  digitalWrite(BUTTON_PIN_4, HIGH);
  delay(100);
  digitalWrite(BUTTON_PIN_4, LOW);
}  // handle1()

void handle2() {
  String result = "";
  result += " 2 \r\n";
  myServer.send(200, "text/javascript; charset=utf-8", result);
  digitalWrite(BUTTON_PIN_1, HIGH);
  delay(100);
  digitalWrite(BUTTON_PIN_1, LOW);
}  // handle2()

void handle3() {
  String result = "";
  result += " 3 \r\n";
  myServer.send(200, "text/javascript; charset=utf-8", result);
  digitalWrite(BUTTON_PIN_2, HIGH);
  delay(100);
  digitalWrite(BUTTON_PIN_2, LOW);
  
}  // handle3()

void handle4() {
  String result = "";
  result += " 4 \r\n";
  myServer.send(200, "text/javascript; charset=utf-8", result);
  digitalWrite(BUTTON_PIN_3, HIGH);
  delay(100);
  digitalWrite(BUTTON_PIN_3, LOW);
}  // handle4()

void handle5() {
  String result = "";
  result += " 5 \r\n";
  myServer.send(200, "text/javascript; charset=utf-8", result);
  digitalWrite(BUTTON_PIN_5, HIGH);
  delay(100);
  digitalWrite(BUTTON_PIN_5, LOW);
}  // handle5()

void handle6() {
  String result = "";
  result += " 6 \r\n";
  myServer.send(200, "text/javascript; charset=utf-8", result);
  digitalWrite(BUTTON_PIN_6, HIGH);
  delay(100);
  digitalWrite(BUTTON_PIN_6, LOW);
}  // handle6()

void handle7() {
  String result = "";
  result += " 7 \r\n";
  myServer.send(200, "text/javascript; charset=utf-8", result);
  digitalWrite(BUTTON_PIN_7, HIGH);
  delay(100);
  digitalWrite(BUTTON_PIN_7, LOW);
}  // handle7()

// void handle8() {
//   String result = "";
//   result += " 8 \r\n";
//   myServer.send(200, "text/javascript; charset=utf-8", result);
//   digitalWrite(13, HIGH);
//   delay(100);
//   digitalWrite(13, LOW);
// }  // handle8()

void handleRestart() {
  String result = "";
  result += " 8 \r\n";
  myServer.send(200, "text/javascript; charset=utf-8", result);
  needRestart = 1;
}  // handleRestart()

void setup()
{
#ifdef MODEL_3
  Serial.begin(9600);
  Serial.println("Start.");
  Wire.begin();
  if(!ina226.init()){
    Serial.println("Failed to init INA226. Check your wiring.");
    // while(1){} // without INA226 - library return 255 - motor run
  }
#endif
  GPIO_Init();
  Serial.println("1");
  BLE_Init();
  Serial.println("2");
  EEPROM.begin(64);
  Serial.println("3");
#ifdef MODEL_3
  ina226.waitUntilConversionCompleted();
  Serial.println("inna");
#endif
  
  Serial.println("myServer");
  myServer.on("/", HTTP_GET, handleIndex);
  myServer.on("/in", HTTP_GET, handleIn);
  myServer.on("/on", HTTP_GET, handleOn);
  myServer.on("/1", HTTP_GET, handle1);
  myServer.on("/2", HTTP_GET, handle2);
  myServer.on("/3", HTTP_GET, handle3);
  myServer.on("/4", HTTP_GET, handle4);
  myServer.on("/5", HTTP_GET, handle5);
  myServer.on("/6", HTTP_GET, handle6);
  myServer.on("/7", HTTP_GET, handle7);
  // myServer.on("/8", HTTP_GET, handle8);
  myServer.on("/restart", HTTP_GET, handleRestart);
  myServer.on("/update", HTTP_GET, []() {
    myServer.sendHeader("Connection", "close");
    myServer.send(200, "text/html", serverIndex);
  });
  myServer.on(
    "/update", HTTP_POST,
    []() {
      myServer.sendHeader("Connection", "close");
      myServer.send(200, "text/plain", (Update.hasError()) ? "FAIL" : "OK");
      ESP.restart();
    }, []() {
      HTTPUpload &upload = myServer.upload();
      if (upload.status == UPLOAD_FILE_START) {
        Serial.setDebugOutput(true);
        Serial.printf("Update: %s\n", upload.filename.c_str());
        if (!Update.begin()) {  //start with max available size
          Update.printError(Serial);
        }
      } else if (upload.status == UPLOAD_FILE_WRITE) {
        if (Update.write(upload.buf, upload.currentSize) != upload.currentSize) {
          Update.printError(Serial);
        }
      } else if (upload.status == UPLOAD_FILE_END) {
        if (Update.end(true)) {  //true to set the size to the current progress
          Serial.printf("Update Success: %u\nRebooting...\n", upload.totalSize);
        } else {
          Update.printError(Serial);
        }
        Serial.setDebugOutput(false);
      } else {
        Serial.printf("Update Failed Unexpectedly (likely broken connection): status=%d\n", upload.status);
      }
    }
  );

  WiFi.setHostname("RestNow");
  Serial.println("Wi-Fi");
  long WiFiCount = WiFi.scanNetworks();
  String SSID1 = "Wellcome"; SSID1.toUpperCase(); String SSID2; 
  for (int i = 0; i <= WiFiCount; i++) {
    SSID2 = WiFi.SSID(i); SSID2.toUpperCase();
    if ((SSID1 == SSID2)) 
    WiFi.mode(WIFI_STA);
    WiFi.begin("Wellcome", "9999999990");
    myServer.begin();
    WebServerInit();
  }
  //WiFi.softAP("RestNow_OTA_NET");
  
  // pinMode(3, OUTPUT); digitalWrite(3, LOW);
  // pinMode(6, OUTPUT); digitalWrite(6, LOW);
  // pinMode(7, OUTPUT); digitalWrite(7, LOW);
  // pinMode(8, OUTPUT); digitalWrite(8, LOW);
  // pinMode(9, OUTPUT); digitalWrite(9, LOW);
  // pinMode(10, OUTPUT); digitalWrite(10, LOW);
  // pinMode(11, OUTPUT); digitalWrite(11, LOW);
  // pinMode(12, OUTPUT); digitalWrite(12, LOW);
  // pinMode(13, OUTPUT); digitalWrite(13, LOW);

  uint32_t* rtc_mem = (uint32_t*)(0x50000000);
  uint32_t* mAmA_mem = (uint32_t*)(0x50000008);
  bootCount = *rtc_mem; mAmA = *mAmA_mem;

  delay(1000);
  for (int i = 0; i < 1000; i++) {mA = mA + analogRead(4); delay(1);}

  esp_reset_reason_t reset_reason = esp_reset_reason();
  if (reset_reason == ESP_RST_POWERON) {
    bootCount = 0; *rtc_mem = bootCount;
    mAmA = mA; *mAmA_mem = mAmA;
  }
  
  bootCount++;  *rtc_mem = bootCount;
}

void loop() {
  CheckTimeBetweenKeepProcess();
  CheckPauseTimeProcess();
  CheckMotorProcess();
  if (1000 < (millis() - lastMillisecond)) {
    lastMillisecond = millis();
    if (maxCycle < cycle) maxCycle = cycle;
    cycle = 0;
  } //lastMillisecond
  if (needRestart) ESP.restart();
  cycle++;
  mA = mA - mA / 1000;
  mA = mA + analogRead(4);
  if (mA > mAmA) {
    uint32_t* mAmA_mem = (uint32_t*)(0x50000008);
    mAmA = mA; *mAmA_mem = mAmA;
  }
  if (WL_CONNECTED == WiFi.status()) {
    myServer.handleClient();
    myWebServerRun(); 
  }  
  if (0 == needPress) delay(1);
  else  if (1 == needPress) needPress = millis();
        else  if (100 > (millis() - needPress)) digitalWrite(6, HIGH);
              else if (200 > (millis() - needPress)) digitalWrite(6, LOW);
                   else {needPress = 0; mA = mAmA;}
}

void CheckConIntervalProcess()
{
  if (client_connected)
  {
    if (millis() - start_con_time > max_con_interval)
    {
      ble_server->disconnect(conn_id);
    }
  }
}
void CheckTimeBetweenKeepProcess()
{
  if (run_permit)
  {
    if (millis() - last_keep_time > time_bet_keep)
    {
      //run_permit = false;
      if (session_pause == false)
      {
        run_permit = false;
        digitalWrite(BoardLedPin, LOW);
      }
    }
  }
}
void CheckPauseTimeProcess()
{
  if (session_pause)
  {
    if (millis() - start_pause_time > max_pause_time)
    {
      run_permit = false;
      session_pause = false;
    }
  }
}
uint8_t IsMotorRun()
{
  #ifdef MODEL_1
    //if (!digitalRead(MotorControlPin)) return 1;
    //else return 0;
    if (digitalRead(MotorControlPin))
    {
      for (int i = 0; i < 10; i++)
      {
        delay(1);
        if (!digitalRead(MotorControlPin)) return 1;
      }
      return 0;
    }
    else return 1;
  #elif defined(MODEL_2)
    if (digitalRead(MotorControlPin)) return 1;
    else return 0;
  #elif defined(MODEL_3)
    current_mA = ina226.getCurrent_mA();
    if (current_mA > 70) return 1;
    else return 0;
  #elif defined(MODEL_A)
    if (mA < mAmA - 20000 ) return 1; else return 0;
    //if (digitalRead(MotorControlPin)) {
    //  for (int i = 0; i < 10; i++) {
    //    delay(1);
    //    if (!digitalRead(MotorControlPin)) return 1;
    //  }
    //  return 0;
    //} else return 1;
  #endif
}

void SwitchOff() {
  if (0 == needPress) {
    session_id = 0;
    digitalWrite(PowerRelayPin, LOW);
    digitalWrite(3, HIGH);
    delay(3000);  
    mA = mAmA;
    digitalWrite(PowerRelayPin, HIGH);
    digitalWrite(3, LOW);
  }
}

void CheckMotorProcess()
{
  uint8_t motor_state = IsMotorRun();
  if (prev_motor_state != motor_state)
  {
    motor_state_charc->setValue(String(motor_state));
    motor_state_charc->notify();
    prev_motor_state = motor_state;
  }
  if (motor_state == 1 && (!run_permit || session_pause))
  {
    SwitchOff();
  }
  
}